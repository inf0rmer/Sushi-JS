<div class="highlight"><pre><span class="nx">define</span><span class="p">(</span>
    <span class="p">[],</span>
    
    <span class="cm">/**</span>
<span class="cm">	 * Defines several safe debugging methods</span>
<span class="cm">	 *</span>
<span class="cm">	 * @namespace Sushi.utils</span>
<span class="cm">	 * @class debug</span>
<span class="cm">	 */</span>
    <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
		<span class="c1">// Cached logging history</span>
		<span class="kd">var</span> <span class="nx">_history</span> <span class="o">=</span> <span class="p">[],</span>
		
		<span class="cm">/**</span>
<span class="cm">		 * Returns the debugging methods the environment supports</span>
<span class="cm">		 *</span>
<span class="cm">		 * @returns {Object} Supported debugging methods</span>
<span class="cm">		 */</span>
		<span class="nx">_supports</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
			<span class="k">return</span> <span class="p">{</span>
				<span class="nx">log</span><span class="o">:</span> <span class="nb">window</span><span class="p">.</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="o">||</span> <span class="kc">false</span><span class="p">,</span>
				<span class="nx">warn</span><span class="o">:</span> <span class="nb">window</span><span class="p">.</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span> <span class="o">||</span> <span class="kc">false</span><span class="p">,</span>
				<span class="nx">error</span><span class="o">:</span> <span class="nb">window</span><span class="p">.</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span> <span class="o">||</span> <span class="kc">false</span><span class="p">,</span>
				<span class="nx">dir</span><span class="o">:</span> <span class="nb">window</span><span class="p">.</span><span class="nx">console</span><span class="p">.</span><span class="nx">dir</span> <span class="o">||</span> <span class="kc">false</span>
			<span class="p">};</span>
		<span class="p">})(),</span>
		
		<span class="c1">// Local ref for easy converting to real arrays</span>
		<span class="nx">_slice</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">,</span>
		
		<span class="cm">/**</span>
<span class="cm">		 * Logs comma-separated arguments to the console using console.log()</span>
<span class="cm">		 *</span>
<span class="cm">		 * @param Values to be logged</span>
<span class="cm">		 */</span>
		<span class="nx">log</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
			<span class="c1">// Turn the arguments object into a real array</span>
			<span class="kd">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="nx">_slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
			
		    <span class="k">if</span> <span class="p">(</span><span class="nx">_supports</span><span class="p">.</span><span class="nx">log</span><span class="p">)</span> <span class="p">{</span>
		    	<span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">len</span> <span class="o">=</span> <span class="nx">args</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">len</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		    		<span class="nx">_history</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">args</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
					<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">args</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
				<span class="p">}</span>
		    <span class="p">}</span>
		<span class="p">},</span>
		
		<span class="cm">/**</span>
<span class="cm">		 * Logs comma-separated arguments to the console using console.error()</span>
<span class="cm">		 *</span>
<span class="cm">		 * @param Values to be logged</span>
<span class="cm">		 */</span>
		<span class="nx">error</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
			<span class="c1">// Turn the arguments object into a real array</span>
			<span class="kd">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="nx">_slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
			
		    <span class="k">if</span> <span class="p">(</span><span class="nx">_supports</span><span class="p">.</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
		    	<span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">len</span> <span class="o">=</span> <span class="nx">args</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">len</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		    		<span class="nx">_history</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">args</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
					<span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">args</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
				<span class="p">}</span>
		    <span class="p">}</span>
		<span class="p">},</span>
		
		<span class="cm">/**</span>
<span class="cm">		 * Logs comma-separated arguments to the console using console.warn()</span>
<span class="cm">		 *</span>
<span class="cm">		 * @param Values to be logged</span>
<span class="cm">		 */</span>
		<span class="nx">warn</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
			<span class="c1">// Turn the arguments object into a real array</span>
			<span class="kd">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="nx">_slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
			
		    <span class="k">if</span> <span class="p">(</span><span class="nx">_supports</span><span class="p">.</span><span class="nx">warn</span><span class="p">)</span> <span class="p">{</span>
		    	<span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">len</span> <span class="o">=</span> <span class="nx">args</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">len</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		    		<span class="nx">_history</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">args</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
					<span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="nx">args</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
				<span class="p">}</span>
		    <span class="p">}</span>
		<span class="p">},</span>
		
		<span class="cm">/**</span>
<span class="cm">		 * Logs comma-separated arguments to the console using console.dir()</span>
<span class="cm">		 *</span>
<span class="cm">		 * @param Values to be logged</span>
<span class="cm">		 */</span>
		<span class="nx">dir</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
			<span class="c1">// Turn the arguments object into a real array</span>
			<span class="kd">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="nx">_slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
			
		    <span class="k">if</span> <span class="p">(</span><span class="nx">_supports</span><span class="p">.</span><span class="nx">dir</span><span class="p">)</span> <span class="p">{</span>
		    	<span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">len</span> <span class="o">=</span> <span class="nx">args</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">len</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		    		<span class="nx">_history</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">args</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
					<span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">args</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
				<span class="p">}</span>
		    <span class="p">}</span>
		<span class="p">},</span>
		
		<span class="cm">/**</span>
<span class="cm">		 * Prints the whole cached debug history to the console</span>
<span class="cm">		 *</span>
<span class="cm">		 */</span>
		<span class="nx">logHistory</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
		    <span class="nx">log</span><span class="p">(</span><span class="nx">_history</span><span class="p">);</span>
		<span class="p">};</span>
		
		<span class="k">return</span> <span class="p">{</span>
			<span class="nx">log</span><span class="o">:</span> <span class="nx">log</span><span class="p">,</span>
			<span class="nx">warn</span><span class="o">:</span> <span class="nx">warn</span><span class="p">,</span>
			<span class="nx">error</span><span class="o">:</span> <span class="nx">error</span><span class="p">,</span>
			<span class="nx">dir</span><span class="o">:</span> <span class="nx">dir</span><span class="p">,</span>
			<span class="nx">logHistory</span><span class="o">:</span> <span class="nx">logHistory</span>
		<span class="p">};</span>
    <span class="p">}</span>
<span class="p">);</span>
</pre></div>

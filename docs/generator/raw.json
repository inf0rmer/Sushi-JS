{"majorversion": 0, "filemap": {"sushi.Model.js": {"classlist": [], "name": "sushi.Model.js", "module": "Sushi"}, "sushi.utils.js": {"classlist": ["Sushi.utils"], "name": "sushi.utils.js", "module": "Sushi"}, "sushi.utils.debug.js": {"classlist": [], "name": "sushi.utils.debug.js", "module": "Sushi"}, "sushi.utils.json.js": {"classlist": [], "name": "sushi.utils.json.js", "module": "Sushi"}, "sushi.events.pubsub.js": {"classlist": [], "name": "sushi.events.pubsub.js", "module": "Sushi"}, "sushi.core.js": {"classlist": ["Sushi.core"], "name": "sushi.core.js", "module": "Sushi"}, "sushi.base.js": {"classlist": ["Sushi.base"], "name": "sushi.base.js", "module": "Sushi"}, "requireplugins-jquery-1.4.4.js": {"classlist": [], "name": "requireplugins-jquery-1.4.4.js", "module": "Sushi"}, "sushi.utils.collection.js": {"classlist": [], "name": "sushi.utils.collection.js", "module": "Sushi"}, "sushi.events.js": {"classlist": ["Sushi.events"], "name": "sushi.events.js", "module": "Sushi"}, "sushi.utils.lang.js": {"classlist": [], "name": "sushi.utils.lang.js", "module": "Sushi"}}, "modules": {"Sushi": {"description": "Sushi Core", "submodules": [], "classlist": ["Sushi.base", "Sushi.core", "Sushi.events", "Sushi.utils"], "filelist": ["requireplugins-jquery-1.4.4.js", "sushi.Model.js", "sushi.base.js", "sushi.core.js", "sushi.events.js", "sushi.events.pubsub.js", "sushi.utils.collection.js", "sushi.utils.debug.js", "sushi.utils.js", "sushi.utils.json.js", "sushi.utils.lang.js"], "subdata": {}, "name": "Sushi"}}, "classmap": {"Sushi.utils": {"name": "Sushi.utils", "namespace": "Sushi", "module": "Sushi", "methods": {"isArray": {"return": {"type": "Boolean", "description": "Whether argument is an array or not"}, "params": [{"type": "", "name": "array", "description": " Argument to test"}], "description": "Checks for array-ness", "guessedname": "isArray", "guessedtype": "function"}, "isRegExp": {"return": {"type": "Boolean", "description": "Whether argument is a RegExp or not"}, "params": [{"type": "", "name": "obj", "description": " Object to test"}], "description": "Checks if an object is a Regular Expression", "guessedname": "isRegExp", "guessedtype": "function"}, "isDate": {"return": {"type": "Boolean", "description": "Whether variable is a date"}, "params": [{"type": "", "name": "obj", "description": " Variable to test"}], "description": "Checks whether a given variable is a date", "guessedname": "isDate", "guessedtype": "function"}, "replaceAccents": {"return": {"type": "String", "description": "string without accented characters in lower case"}, "params": [{"type": "String", "name": "string", "description": " with accented characters"}], "description": "Converts every accented letter in a string with its non-accented equivalent.\nCurrently WIP, trying to squeeze this function as much as possible. \n(≈3ms per string, with 2 calls ≈ 1.5ms per call)", "guessedname": "replaceAccents", "guessedtype": "function"}, "stringify": {"return": {"type": "String", "description": "Well formatted JSON string"}, "params": [{"type": "Object", "name": "literal", "description": " Literal Notated Javascript Object"}], "description": "Converts a Javascript literal object into a well formatted JSON string", "guessedname": "stringify", "guessedtype": "function"}, "keys": {"return": {"type": "", "description": "Array containing the object's key names."}, "params": [{"type": "", "name": "obj", "description": " Object to retrieve keys from"}], "description": "Retrieve the names of an object's properties.\nDefaults to ECMAScript 5's native Object.keys. Lifted from Underscore JS.", "guessedname": "keys", "guessedtype": "function"}, "isNaN": {"return": {"type": "Boolean", "description": "Whether argument is NaN or not"}, "params": [{"type": "", "name": "obj", "description": " Object to test"}], "description": "Checks if an object is NaN\nNaN happens to be the only object in Javascript that is not equal to itself.", "guessedname": "isNaN", "guessedtype": "function"}, "parse": {"return": {"type": "Object", "description": "Well formatted JS literal"}, "params": [{"type": "String", "name": "string", "description": " JSON-formatted string"}], "description": "Converts a JSON-formatted string into a Javascript literal object", "guessedname": "parse", "guessedtype": "function"}, "isNull": {"return": {"type": "Boolean", "description": "Whether argument is equal to null or not"}, "params": [{"type": "", "name": "obj", "description": " Object to test"}], "description": "Checks if an object's value is equal to null", "guessedname": "isNull", "guessedtype": "function"}, "range": {"return": {"type": "", "description": "Array containing the progression."}, "params": [{"type": "", "name": "start", "description": " Value to start progression from. Defaults to 0"}, {"type": "", "name": "stop", "description": " Value to stop progression at"}, {"type": "", "name": "step", "description": " Value to increment progression by. Defaults to 1"}], "description": "Generate an integer Array containing an arithmetic progression.\nA port of the native Python range(). Lifted from Underscore JS.\nSee http://docs.python.org/library/functions.html#range for more info.", "guessedname": "range", "guessedtype": "function"}, "isEmpty": {"return": {"type": "Boolean", "description": "Whether argument is empty or not"}, "params": [{"type": "", "name": "obj", "description": " Object to test"}], "description": "Checks if an object is empty", "guessedname": "isEmpty", "guessedtype": "function"}, "uniqueId": {"return": {"type": "", "description": "Unique ID"}, "params": [{"type": "", "name": "prefix", "description": " Optional prefix to prepend to the unique ID"}], "description": "Generates a unique integer ID (within the client session)", "guessedname": "uniqueId", "guessedtype": "function"}, "isEqual": {"return": {"type": "Boolean", "description": "Whether objects are equal or not"}, "params": [{"type": "", "name": "a", "description": " First object"}, {"type": "", "name": "b", "description": " Second object"}], "description": "Performs a deep comparison to check if two objects are equal.", "guessedname": "isEqual", "guessedtype": "function"}, "isElement": {"return": {"type": "Boolean", "description": "Whether argument is a DOM node or not"}, "params": [{"type": "", "name": "obj", "description": " Object to test"}], "description": "Checks if an object is a DOM node", "guessedname": "isElement", "guessedtype": "function"}, "isFunction": {"return": {"type": "Boolean", "description": "Whether argument is a function or not"}, "params": [{"type": "", "name": "obj", "description": " Object to test"}], "description": "Checks if an object is a function", "guessedname": "isFunction", "guessedtype": "function"}, "isNumber": {"return": {"type": "Boolean", "description": "Whether value is a number or not."}, "params": [{"type": "", "name": "number", "description": " Value to test"}], "description": "Detects whether a value is a number", "guessedname": "isNumber", "guessedtype": "function"}, "isUndefined": {"return": {"type": "Boolean", "description": "Whether argument is equal to undefined or not"}, "params": [{"type": "", "name": "obj", "description": " Object to test"}], "description": "Checks if an object is equal to undefined", "guessedname": "isUndefined", "guessedtype": "function"}, "identity": {"return": {"type": "", "description": "Value passed in to the function"}, "params": [{"type": "", "name": "value", "description": " Value to return"}], "description": "Default iterator object", "guessedname": "identity", "guessedtype": "function"}, "isArguments": {"return": {"type": "Boolean", "description": "Whether variable is an arguments object"}, "params": [{"type": "", "name": "obj", "description": " Variable to test"}], "description": "Checks whether a given variable is an arguments object", "guessedname": "isArguments", "guessedtype": "function"}}, "file": "sushi.utils.js", "shortname": "utils", "description": "General purpose utility functions for the Sushi JS framework"}, "Sushi.base": {"name": "Sushi.base", "namespace": "Sushi", "module": "Sushi", "file": "sushi.base.js", "shortname": "base", "description": "Sushi JS\nCopyright (C) 2011 Bruno Abrantes\nMIT Licensed"}, "Sushi.core": {"name": "Sushi.core", "namespace": "Sushi", "module": "Sushi", "methods": {"namespace": {"return": {"type": "Object", "description": "Namespaced object"}, "params": [{"type": "String", "name": "namespaceString", "description": " Name of namespace to create"}], "description": "A utility that non-destructively defines namespaces", "guessedname": "namespace", "guessedtype": "function"}, "extend": {"return": {"type": "Object", "description": "Extended object"}, "params": [{"type": "Object", "name": "destination", "description": " Object to copy properties to"}, {"type": "Object", "name": "source", "description": " Object to copy properties from"}], "description": "Simple extending (shallow copying) utility", "guessedname": "extend", "guessedtype": "function"}}, "file": "sushi.core.js", "shortname": "core", "description": "Sushi Core"}, "Sushi.events": {"name": "Sushi.events", "namespace": "Sushi", "module": "Sushi", "methods": {"toArray": {"return": {"type": "Array", "description": "Old variable in array format"}, "params": [{"type": "", "name": "iterable", "description": " Variable to convert to an array"}], "description": "Safely convert anything iterable into a real, live array.", "guessedname": "toArray", "guessedtype": "function"}, "error": {"params": [{"type": "", "name": "Values", "description": " to be logged"}], "description": "Logs comma-separated arguments to the console using console.error()", "guessedname": "error", "guessedtype": "function"}, "log": {"params": [{"type": "", "name": "Values", "description": " to be logged"}], "description": "Logs comma-separated arguments to the console using console.log()", "guessedname": "log", "guessedtype": "function"}, "reduceRight": {"return": {"type": "Array", "description": "Reduced Array"}, "params": [{"type": "Array", "name": "Array", "description": " to reduce."}, {"type": "Function", "name": "Function", "description": " to execute on each value in the array."}, {"type": "", "name": "memo", "description": " Object to use as the first argument to the first call of the callback."}], "description": "Reduce builds up a single result from a list of values (from right-to-left). \nDelegates to ECMAScript 5's native reduceRight if available.", "guessedname": "reduceRight", "guessedtype": "function"}, "some": {"return": {"type": "Booelan", "description": "True if an object matches the truth test."}, "params": [{"type": "Object", "name": "obj", "description": " Object to search through"}, {"type": "Function", "name": "iterator", "description": " Function that produces an element of the new Array from an element of the current one."}, {"type": "Object", "name": "context", "description": " Object to use as \"this\" when executing iterator"}], "description": "Determine if at least one element in the object matches a truth test.\nDelegates to ECMAScript 5's native some if available.", "guessedname": "some", "guessedtype": "function"}, "_supports": {"returns": "{Object} Supported debugging methods", "description": "Returns the debugging methods the environment supports", "guessedname": "_supports", "guessedtype": "function"}, "contains": {"return": {"type": "Boolean", "description": "True if needle is present."}, "params": [{"type": "Object", "name": "heystack", "description": " Object or Array to search in."}, {"type": "", "name": "needle", "description": " Value to search heystack for"}], "description": "Determine if a given value is included in the array or object using ===.", "guessedname": "contains", "guessedtype": "function"}, "reduce": {"return": {"type": "Array", "description": "Reduced Array"}, "params": [{"type": "Array", "name": "obj", "description": " Array to reduce."}, {"type": "Function", "name": "iterator", "description": " Function to execute on each value in the array."}, {"type": "", "name": "memo", "description": " Object to use as the first argument to the first call of the callback."}], "description": "Reduce builds up a single result from a list of values \nfrom left-to-right.\nDelegates to ECMAScript 5's native reduce if available.", "guessedname": "reduce", "guessedtype": "function"}, "publish": {"params": [{"type": "String", "name": "topic", "description": " The channel to publish on"}, {"type": "Array", "name": "args", "description": "  The data to publish. Each array item is converted into an ordered\narguments on the subscribed functions."}], "description": "Publish data on a named topic\nExample:\nSushi.events.publish(\"/some/topic\", [\"a\",\"b\",\"c\"]);", "guessedname": "publish", "guessedtype": "function"}, "warn": {"params": [{"type": "", "name": "Values", "description": " to be logged"}], "description": "Logs comma-separated arguments to the console using console.warn()", "guessedname": "warn", "guessedtype": "function"}, "filter": {"return": {"type": "Array", "description": "Filtered Array"}, "params": [{"type": "Array", "name": "obj", "description": " Array to filter."}, {"type": "Function", "name": "iterator", "description": " Function to execute on each value in the array."}, {"type": "", "name": "memo", "description": " Object to use as the first argument to the first call of the callback."}], "description": "Return all the elements that pass a truth test.\nDelegates to ECMAScript 5's native filter if available.", "guessedname": "filter", "guessedtype": "function"}, "subscribe": {"return": {"type": "Array", "description": "A handle which can be used to unsubscribe this particular subscription"}, "params": [{"type": "String", "name": "topic", "description": "     The channel to subscribe to"}, {"type": "Function", "name": "callback", "description": "  The handler event. Anytime something is Sushi.events.publish'ed on a \nsubscribed channel, the callback will be called with the\npublished array as ordered arguments."}], "description": "Register a callback on a named topic\nExample:\nSushi.events.subscribe(\"/some/topic\", function(a, b, c){ //handle data});", "guessedname": "subscribe", "guessedtype": "function"}, "map": {"return": {"type": "Array", "description": "Reduced Array"}, "params": [{"type": "Array", "name": "obj", "description": " Original array."}, {"type": "Function", "name": "iterator", "description": " Function that produces an element of the new Array from an element of the current one."}, {"type": "Object", "name": "context", "description": " Object to use as \"this\" when executing iterator"}], "description": "Creates a new array with the results of calling a provided function \non every element in this array.\nDelegates to ECMAScript 5's native map if available.", "guessedname": "map", "guessedtype": "function"}, "unsubscribe": {"params": [{"type": "Array", "name": "handle", "description": " The return value from a Sushi.events.subscribe call"}], "description": "Disconnect a subscribed function for a topic\nExample:\nvar handle = Sushi.events.subscribe(\"/some/topic\", function(a, b, c){ //handle data});\nSushi.events.unsubscribe(handle);", "guessedname": "unsubscribe", "guessedtype": "function"}, "pluck": {"return": {"type": "Object", "description": "Property in object"}, "params": [{"type": "Object", "name": "obj", "description": " Object to search through"}, {"type": "", "name": "key", "description": " Property key to look for"}], "description": "Convenience method for Sushi.utils.collection.map to get a property from an object.", "guessedname": "pluck", "guessedtype": "function"}, "each": {"params": [{"type": "", "name": "obj", "description": " Object to loop through"}, {"type": "Function", "name": "iterator", "description": " Function to callback for each element"}, {"type": "Object", "name": "context", "description": " Object to use as \"this\" when executing iterator"}], "description": "Cornerstone each (forEach) implementation.\nHandles objects implementing forEach, arrays, and raw objects. \nDelegates to ECMAScript 5's native forEach if available.\nBased on the Underscore JS implementation.", "guessedname": "each", "guessedtype": "function"}, "logHistory": {"description": "Prints the whole cached debug history to the console", "guessedname": "logHistory", "guessedtype": "function"}, "dir": {"params": [{"type": "", "name": "Values", "description": " to be logged"}], "description": "Logs comma-separated arguments to the console using console.dir()", "guessedname": "dir", "guessedtype": "function"}}, "file": "sushi.events.js", "shortname": "events", "description": "Sushi Events"}}, "version": "0.0.5", "namespaces": ["Sushi"]}